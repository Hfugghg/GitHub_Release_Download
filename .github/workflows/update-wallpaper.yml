# .github/workflows/update-wallpaper.yml

name: Update Wallpaper Gallery

on:
  schedule:
    # 每小时运行一次
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-gallery:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Wallpaper Gallery
        id: update_gallery
        run: |
          # --- 配置 ---
          MAX_FILES_PER_FOLDER=100
          PAGES_TO_PROCESS=3

          # --- 初始化 ---
          mkdir -p assets/landscape assets/portrait
          touch assets/landscape/meta.json assets/portrait/meta.json
          EXISTING_IDS=$(jq -s '(.[0].data // []) + (.[1].data // []) | .[] .id' assets/landscape/meta.json assets/portrait/meta.json)
          
          # --- 数据获取和过滤 ---
          echo "开始获取和过滤新的壁纸..."
          NEW_IMAGES_JSON="[]"

          LAST_PAGE=$(curl -s "https://wallhaven.cc/api/v1/search?q=anime+girls&categories=010&sorting=toplist&topRange=6M&purity=100" | jq '.meta.last_page')
          if [[ -z "$LAST_PAGE" || "$LAST_PAGE" == "null" || "$LAST_PAGE" -lt 1 ]]; then
            echo "错误：无法获取有效的总页数。跳过本次更新。"
            exit 0
          fi
          echo "壁纸总页数 (toplist/6M): $LAST_PAGE"
          
          for i in $(seq 1 $PAGES_TO_PROCESS); do
            echo "正在根据权重选择随机页面..."
            PROB_ROLL=$(( RANDOM % 1000 + 1 ))

            if [ "$PROB_ROLL" -le 800 ]; then
              RANDOM_PAGE=$(( RANDOM % 10 + 1 ))
              echo "权重命中范围 [1-10]，选中页面: ${RANDOM_PAGE}"
            elif [ "$PROB_ROLL" -le 990 ]; then
              UPPER_BOUND=$( [ "100" -lt "$LAST_PAGE" ] && echo "100" || echo "$LAST_PAGE" )
              if [ "$UPPER_BOUND" -gt 10 ]; then
                RANGE=$(( UPPER_BOUND - 10 ))
                RANDOM_PAGE=$(( RANDOM % RANGE + 11 ))
              else
                RANDOM_PAGE=$(( RANDOM % 10 + 1 ))
              fi
              echo "权重命中范围 [11-100]，选中页面: ${RANDOM_PAGE}"
            else
              if [ "$LAST_PAGE" -gt 100 ]; then
                RANGE=$(( LAST_PAGE - 100 ))
                RANDOM_PAGE=$(( RANDOM % RANGE + 101 ))
                echo "权重命中范围 [101-${LAST_PAGE}]，选中页面: ${RANDOM_PAGE}"
              else
                RANDOM_PAGE=$(( RANDOM % LAST_PAGE + 1 ))
                echo "权重命中范围 [101+] (总页数不足，回退至 1-${LAST_PAGE})，选中页面: ${RANDOM_PAGE}"
              fi
            fi

            echo "正在处理第 ${i}/${PAGES_TO_PROCESS} 次更新 (API Page: ${RANDOM_PAGE})..."
          
            API_RESPONSE=$(curl -s "https://wallhaven.cc/api/v1/search?q=anime+girls&categories=010&sorting=toplist&topRange=6M&purity=100&page=${RANDOM_PAGE}")
            PAGE_IMAGES=$(echo "$API_RESPONSE" | jq -c '.data[]')
          
            if [[ -z "$PAGE_IMAGES" ]]; then continue; fi
            if [ "$(echo "$PAGE_IMAGES" | wc -l)" -eq 0 ]; then continue; fi
          
            FRESH_IMAGES_ON_PAGE="[]"
            while read -r image_json; do
              IMAGE_ID=$(echo "$image_json" | jq -r '.id')
              if echo -e "$EXISTING_IDS" | grep -q "\"$IMAGE_ID\""; then
                continue
              else
                FRESH_IMAGES_ON_PAGE=$(echo "$FRESH_IMAGES_ON_PAGE" | jq --argjson img "$image_json" '. + [$img]')
              fi
            done <<< "$PAGE_IMAGES"

            # [修复 1] 在此立即更新 EXISTING_IDS 变量，防止单次运行内重复添加
            FRESH_IDS=$(echo "$FRESH_IMAGES_ON_PAGE" | jq -r '.[] .id')
            if [ -n "$FRESH_IDS" ]; then
                EXISTING_IDS="${EXISTING_IDS}\n${FRESH_IDS}"
            fi

            NEW_IMAGES_JSON=$(echo "$NEW_IMAGES_JSON" | jq --argjson fresh "$FRESH_IMAGES_ON_PAGE" '. + $fresh')
            echo "从本页成功添加 $(echo "$FRESH_IMAGES_ON_PAGE" | jq 'length') 张新图。"
          done

          if [[ $(echo "$NEW_IMAGES_JSON" | jq 'length') -eq 0 ]]; then
            echo "经过筛选，没有发现任何新的壁纸，本次任务结束。"
            exit 0
          fi
          
          # --- 省略下载和文件清理部分（保持不变） ---
          # --- Handling, sorting, and downloading ---
          echo "开始处理和下载 $(echo "$NEW_IMAGES_JSON" | jq 'length') 张新壁纸..."
          OLD_LANDSCAPE_META=$(jq '.data // []' assets/landscape/meta.json)
          OLD_PORTRAIT_META=$(jq '.data // []' assets/portrait/meta.json)
          NEW_LANDSCAPE_ENTRIES="[]"
          NEW_PORTRAIT_ENTRIES="[]"
          while read -r image_json; do
            ID=$(echo "$image_json" | jq -r '.id')
            PATH_URL=$(echo "$image_json" | jq -r '.path')
            SOURCE_URL=$(echo "$image_json" | jq -r '.source')
            RATIO=$(echo "$image_json" | jq -r '.ratio | tonumber')
            EXTENSION="${PATH_URL##*.}"
            FILENAME="${ID}.${EXTENSION}"
            TIMESTAMP=$(date --iso-8601=seconds)
            NEW_META_ENTRY=$(jq -n --arg id "$ID" --arg source "$SOURCE_URL" --arg ts "$TIMESTAMP" \
              '{id: $id, source: $source, added_at: $ts}')
            if (( $(echo "$RATIO >= 1.0" | bc -l) )); then
              echo "下载横屏图片: ${FILENAME}"
              curl -s -L -o "assets/landscape/${FILENAME}" "$PATH_URL"
              NEW_LANDSCAPE_ENTRIES=$(echo "$NEW_LANDSCAPE_ENTRIES" | jq --argjson entry "$NEW_META_ENTRY" '. + [$entry]')
            else
              echo "下载竖屏图片: ${FILENAME}"
              curl -s -L -o "assets/portrait/${FILENAME}" "$PATH_URL"
              NEW_PORTRAIT_ENTRIES=$(echo "$NEW_PORTRAIT_ENTRIES" | jq --argjson entry "$NEW_META_ENTRY" '. + [$entry]')
            fi
          done < <(echo "$NEW_IMAGES_JSON" | jq -c '.[]')
          LANDSCAPE_META=$(jq -s '.[0] + .[1]' <(echo "$OLD_LANDSCAPE_META") <(echo "$NEW_LANDSCAPE_ENTRIES"))
          PORTRAIT_META=$(jq -s '.[0] + .[1]' <(echo "$OLD_PORTRAIT_META") <(echo "$NEW_PORTRAIT_ENTRIES"))
          # --- Cleaning up old files (FIFO) ---
          echo "开始清理旧文件以维持数量上限..."
          TOTAL_LANDSCAPE=$(echo "$LANDSCAPE_META" | jq 'length')
          if [ "$TOTAL_LANDSCAPE" -gt "$MAX_FILES_PER_FOLDER" ]; then
            NUM_TO_DELETE=$((TOTAL_LANDSCAPE - MAX_FILES_PER_FOLDER))
            echo "横屏文件夹需要删除 ${NUM_TO_DELETE} 个最老的文件。"
            TO_DELETE=$(echo "$LANDSCAPE_META" | jq -c ".[0:${NUM_TO_DELETE}] | .[]")
            while read -r meta_entry; do
              ID_TO_DELETE=$(echo "$meta_entry" | jq -r '.id')
              find assets/landscape -name "${ID_TO_DELETE}.*" -exec rm {} \;
              echo "已删除旧文件: ${ID_TO_DELETE}.*"
            done <<< "$TO_DELETE"
            LANDSCAPE_META=$(echo "$LANDSCAPE_META" | jq ".[${NUM_TO_DELETE}:]")
          fi
          TOTAL_PORTRAIT=$(echo "$PORTRAIT_META" | jq 'length')
          if [ "$TOTAL_PORTRAIT" -gt "$MAX_FILES_PER_FOLDER" ]; then
            NUM_TO_DELETE=$((TOTAL_PORTRAIT - MAX_FILES_PER_FOLDER))
            echo "竖屏文件夹需要删除 ${NUM_TO_DELETE} 个最老的文件。"
            TO_DELETE=$(echo "$PORTRAIT_META" | jq -c ".[0:${NUM_TO_DELETE}] | .[]")
            while read -r meta_entry; do
              ID_TO_DELETE=$(echo "$meta_entry" | jq -r '.id')
              find assets/portrait -name "${ID_TO_DELETE}.*" -exec rm {} \;
              echo "已删除旧文件: ${ID_TO_DELETE}.*"
            done <<< "$TO_DELETE"
            PORTRAIT_META=$(echo "$PORTRAIT_META" | jq ".[${NUM_TO_DELETE}:]")
          fi
          # --- Writing metadata and index files ---
          echo "正在写回最终的元数据和索引文件..."
          echo "$LANDSCAPE_META" | jq '{ "updated_at": "'$(date --iso-8601=seconds)'", "count": length, "data": . }' > assets/landscape/meta.json
          echo "$PORTRAIT_META"  | jq '{ "updated_at": "'$(date --iso-8601=seconds)'", "count": length, "data": . }' > assets/portrait/meta.json
          ls assets/landscape/ | jq -R . | jq -s . > assets/landscape/index.json
          ls assets/portrait/ | jq -R . | jq -s . > assets/portrait/index.json
          jq 'del(.[] | select(. == "index.json" or . == "meta.json"))' assets/landscape/index.json > tmp.$$.json && mv tmp.$$.json assets/landscape/index.json
          jq 'del(.[] | select(. == "index.json" or . == "meta.json"))' assets/portrait/index.json > tmp.$$.json && mv tmp.$$.json assets/portrait/index.json

      - name: Commit and Push new gallery
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add assets/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "feat(bot): Update wallpaper gallery, add new and remove old"
            # [修复 2] 在 push 前先执行 git pull --rebase，同步远程仓库的最新变更
            git pull --rebase
            git push
            echo "壁纸画廊已更新并推送至仓库。"
          else
            echo "壁纸没有变化，无需推送。"
          fi
