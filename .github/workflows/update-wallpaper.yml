# .github/workflows/update-wallpaper.yml

name: Update Wallpaper Gallery

on:
  schedule:
    # 每小时运行一次
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-gallery:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Max Page Number (Meta Call)
        id: get_meta
        run: |
          LAST_PAGE=$(curl -s "https://wallhaven.cc/api/v1/search?sorting=toplist&topRange=1M&purity=100" | jq '.meta.last_page')
          echo "热门列表总页数: $LAST_PAGE"
          echo "LAST_PAGE=${LAST_PAGE}" >> $GITHUB_OUTPUT

      - name: Fetch Random Page of Wallpapers (Data Call)
        id: get_data
        run: |
          MAX_PAGE=${{ steps.get_meta.outputs.LAST_PAGE }}
          
          # 检查 MAX_PAGE 是否有效，防止第一步API调用失败
          if [[ -z "$MAX_PAGE" || "$MAX_PAGE" == "null" || "$MAX_PAGE" -lt 1 ]]; then
            echo "错误：无法获取有效的总页数。跳过本次更新。"
            # 设置一个标志位，让后续步骤可以跳过
            echo "SKIP=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          RANDOM_PAGE_1=$(( RANDOM % MAX_PAGE + 1 ))
          RANDOM_PAGE_2=$(( RANDOM % MAX_PAGE + 1 ))
          
          if [ "$RANDOM_PAGE_1" -lt "$RANDOM_PAGE_2" ]; then
            FINAL_PAGE="$RANDOM_PAGE_1"
          else
            FINAL_PAGE="$RANDOM_PAGE_2"
          fi
          
          echo "最终选择的随机页码: $FINAL_PAGE"
          curl -s "https://wallhaven.cc/api/v1/search?sorting=toplist&topRange=1M&purity=100&page=${FINAL_PAGE}" -o api_response.json
          echo "已获取第 ${FINAL_PAGE} 页的壁纸数据。"

      - name: Process and Download Wallpapers
        # 只有当上一步没有设置 SKIP=true 标志时才运行
        if: steps.get_data.outputs.SKIP != 'true'
        run: |
          # --- 新增的安全检查 ---
          # 检查 API 响应中 data 数组的长度。如果长度为0或不存在，则说明没有图片数据。
          DATA_LENGTH=$(jq '.data | length' api_response.json)
          if [[ -z "$DATA_LENGTH" || "$DATA_LENGTH" -eq 0 ]]; then
            echo "错误：API 响应中没有找到有效的图片数据。跳过本次更新。"
            exit 0 # 正常退出，不执行后续步骤
          fi

          echo "清理旧画廊..."
          rm -rf assets/gallery
          mkdir -p assets/gallery

          echo "智能选择一张横屏图片作为主背景..."
          MAIN_BG_URL=$(jq -r '.data[] | select((.ratio | tonumber) > 1.2) | .path' api_response.json | head -n 1)

          if [ -z "$MAIN_BG_URL" ]; then
            echo "未找到理想的横屏壁纸，使用第一张作为主背景。"
            MAIN_BG_URL=$(jq -r '.data[0].path' api_response.json)
          fi
          
          curl -o assets/background.jpg "$MAIN_BG_URL"

          echo "开始下载所有图片到画廊..."
          jq -r '.data[] | "\(.id) \(.path)"' api_response.json | while read -r id path; do
            extension="${path##*.}"
            filename="${id}.${extension}"
            echo "正在下载 $filename ..."
            curl -s -o "assets/gallery/${filename}" "$path"
          done
          
          echo "创建画廊索引文件..."
          jq '[.data[] | .id + "." + (.path | split(".") | last)]' api_response.json > assets/gallery/index.json

      - name: Commit and Push new gallery
        # 同样，只有在未跳过的情况下才运行
        if: steps.get_data.outputs.SKIP != 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add assets/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "feat(bot): Update wallpaper gallery from toplist"
            git push
            echo "壁纸画廊已更新并推送至仓库。"
          else
            echo "壁纸没有变化，无需推送。"
          fi