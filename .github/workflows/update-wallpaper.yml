# .github/workflows/update-wallpaper.yml

name: Update Wallpaper Gallery

on:
  schedule:
    # 每小时运行一次
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-gallery:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Max Page Number (Meta Call)
        id: get_meta
        run: |
          LAST_PAGE=$(curl -s "https://wallhaven.cc/api/v1/search?q=anime+girls&categories=010&sorting=toplist&topRange=1M&purity=100" | jq '.meta.last_page')
          echo "热门列表总页数: $LAST_PAGE"
          echo "LAST_PAGE=${LAST_PAGE}" >> $GITHUB_OUTPUT

      - name: Fetch 5 Random Pages of Wallpapers
        id: get_data
        run: |
          MAX_PAGE=${{ steps.get_meta.outputs.LAST_PAGE }}
          
          if [[ -z "$MAX_PAGE" || "$MAX_PAGE" == "null" || "$MAX_PAGE" -lt 1 ]]; then
            echo "错误：无法获取有效的总页数。跳过本次更新。"
            echo "SKIP=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "开始随机获取 5 页壁纸数据..."
          for i in {1..5}
          do
            RANDOM_PAGE_1=$(( RANDOM % MAX_PAGE + 1 ))
            RANDOM_PAGE_2=$(( RANDOM % MAX_PAGE + 1 ))
          
            if [ "$RANDOM_PAGE_1" -lt "$RANDOM_PAGE_2" ]; then
              FINAL_PAGE="$RANDOM_PAGE_1"
            else
              FINAL_PAGE="$RANDOM_PAGE_2"
            fi
          
            echo "正在获取第 ${i} 次随机页: 第 ${FINAL_PAGE} 页"
            curl -s "https://wallhaven.cc/api/v1/search?q=anime+girls&categories=010&sorting=toplist&topRange=1y&purity=100&page=${FINAL_PAGE}" -o "api_response_${i}.json"
            sleep 1 # 增加请求间隔，避免过于频繁
          done

          echo "合并所有获取到的数据..."
          # 使用 jq 合并所有 api_response_*.json 文件中的 .data 数组
          jq -s '[.[] | .data] | add | {data: .}' api_response_*.json > api_response.json
          rm api_response_*.json
          echo "数据合并完成。"

      - name: Process, Sort and Download Wallpapers
        if: steps.get_data.outputs.SKIP != 'true'
        run: |
          DATA_LENGTH=$(jq '.data | length' api_response.json)
          if [[ -z "$DATA_LENGTH" || "$DATA_LENGTH" -eq 0 ]]; then
            echo "错误：API 响应中没有找到有效的图片数据。跳过本次更新。"
            exit 0
          fi

          echo "清理旧画廊..."
          rm -rf assets/landscape assets/portrait
          mkdir -p assets/landscape assets/portrait

          echo "智能选择一张横屏图片作为主背景..."
          # 从宽高比大于1.2的图片中选择第一张作为背景
          MAIN_BG_URL=$(jq -r '.data[] | select((.ratio | tonumber) > 1.2) | .path' api_response.json | head -n 1)
          if [ -z "$MAIN_BG_URL" ]; then
            echo "未找到理想的横屏壁纸，使用第一张图片作为主背景。"
            MAIN_BG_URL=$(jq -r '.data[0].path' api_response.json)
          fi
          curl -s -o assets/background.jpg "$MAIN_BG_URL"

          echo "开始下载并分类所有图片..."
          
          # 初始化计数器和 JSON 数组
          LANDSCAPE_COUNT=1
          PORTRAIT_COUNT=1
          LANDSCAPE_JSON="[]"
          PORTRAIT_JSON="[]"

          # 使用 jq 逐行读取数据进行处理
          while read -r image_json; do
            PATH_URL=$(echo "$image_json" | jq -r '.path')
            RATIO=$(echo "$image_json" | jq -r '.ratio | tonumber')
            EXTENSION="${PATH_URL##*.}"

            # 判断宽高比，1.0 及以上为横屏，以下为竖屏
            if (( $(echo "$RATIO >= 1.0" | bc -l) )); then
              FOLDER="landscape"
              NEW_FILENAME=$(printf "wallpaper_%03d.%s" "$LANDSCAPE_COUNT" "$EXTENSION")
              echo "正在下载横屏图片: ${NEW_FILENAME} ..."
              curl -s -o "assets/${FOLDER}/${NEW_FILENAME}" "$PATH_URL"
              LANDSCAPE_JSON=$(echo "$LANDSCAPE_JSON" | jq --arg file "$NEW_FILENAME" '. + [$file]')
              LANDSCAPE_COUNT=$((LANDSCAPE_COUNT + 1))
            else
              FOLDER="portrait"
              NEW_FILENAME=$(printf "wallpaper_%03d.%s" "$PORTRAIT_COUNT" "$EXTENSION")
              echo "正在下载竖屏图片: ${NEW_FILENAME} ..."
              curl -s -o "assets/${FOLDER}/${NEW_FILENAME}" "$PATH_URL"
              PORTRAIT_JSON=$(echo "$PORTRAIT_JSON" | jq --arg file "$NEW_FILENAME" '. + [$file]')
              PORTRAIT_COUNT=$((PORTRAIT_COUNT + 1))
            fi
          done < <(jq -c '.data[]' api_response.json)
          
          echo "为不同分类创建索引文件..."
          echo "$LANDSCAPE_JSON" > assets/landscape/index.json
          echo "$PORTRAIT_JSON" > assets/portrait/index.json
          echo "所有图片处理完成。"

      - name: Commit and Push new gallery
        if: steps.get_data.outputs.SKIP != 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add assets/
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "feat(bot): Update and sort wallpapers by aspect ratio"
            git push
            echo "壁纸画廊已更新并推送至仓库。"
          else
            echo "壁纸没有变化，无需推送。"
          fi
